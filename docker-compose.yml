version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: smartfit-postgres
    environment:
      POSTGRES_DB: smartfit_db
      POSTGRES_USER: smartfit_user
      POSTGRES_PASSWORD: smartfit_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - smartfit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smartfit_user -d smartfit_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: smartfit-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - smartfit-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smartfit-backend
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://smartfit_user:smartfit_password@postgres:5432/smartfit_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-here
      FRONTEND_URL: http://localhost:3000
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smartfit-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: smartfit-frontend
    environment:
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_ML_SERVICE_URL: http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - smartfit-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML Service (Python FastAPI)
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: smartfit-ml-service
    environment:
      PYTHONPATH: /app
      MODEL_PATH: /app/models
    ports:
      - "8000:8000"
    volumes:
      - ./ml-service:/app
      - ml_models:/app/models
    networks:
      - smartfit-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: smartfit-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
      - ml-service
    networks:
      - smartfit-network

volumes:
  postgres_data:
  redis_data:
  ml_models:

networks:
  smartfit-network:
    driver: bridge 